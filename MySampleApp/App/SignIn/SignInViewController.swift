//
//  SignInViewController.swift
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.10
//
//

extension UITextField {
    func underlined(){
        self.textColor = UIColor.white
        let border = CALayer()
        let width = CGFloat(1.0)
        border.borderColor = UIColor.white.cgColor
        border.frame = CGRect(x: 2, y: self.frame.size.height - width, width:  self.frame.size.width, height: self.frame.size.height)
        border.borderWidth = width
        self.layer.addSublayer(border)
        self.layer.masksToBounds = true
    }
}

import UIKit
import AWSMobileHubHelper

class SignInViewController: UIViewController {

    @IBOutlet weak var customUserIdField: UITextField!
    @IBOutlet weak var customPasswordField: UITextField!
    @IBOutlet weak var customProviderButton: UIButton!

    @IBOutlet weak var customForgotPasswordButton: UIButton!
    
    var didSignInObserver: AnyObject!
    
    var passwordAuthenticationCompletion: AWSTaskCompletionSource<AnyObject>?
    
    func textFieldDidChange(sender: UITextField) {
        if (sender.text != "") {
            for case let button as UIButton in self.view.subviews {
                button.backgroundColor = UIColor.orange
                button.titleLabel?.textColor = UIColor.white
            }
        } else {
            for case let button as UIButton in self.view.subviews {
                button.backgroundColor = UIColor.white
                button.titleLabel?.textColor = UIColor.orange
            }
        }
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        print("Sign In Loading.")
        didSignInObserver =  NotificationCenter.default.addObserver(forName: NSNotification.Name.AWSIdentityManagerDidSignIn,
            object: AWSIdentityManager.default(),
            queue: OperationQueue.main,
            using: {(note: Notification) -> Void in
                let storyboard = UIStoryboard(name: "MapView", bundle: nil)
                let vc = storyboard.instantiateViewController(withIdentifier: "MapView") as! MapViewController
                self.present(vc, animated: true, completion: nil)
        })
        customProviderButton.addTarget(self, action: #selector(self.handleCustomSignIn), for: .touchUpInside)
        customProviderButton.layer.borderColor = UIColor.white.cgColor
        customProviderButton.layer.borderWidth = 1
        customProviderButton.layer.cornerRadius = 15
    }
    
    override func viewDidLayoutSubviews() {
        customUserIdField.layer.sublayers![0].isHidden = true
        customUserIdField.underlined()
        
        customPasswordField.layer.sublayers![0].isHidden = true
        customPasswordField.underlined()
    }

    
    deinit {
        NotificationCenter.default.removeObserver(didSignInObserver)
    }
    
    func dimissController() {
        self.dismiss(animated: true, completion: nil)
    }
    
    // MARK: - Utility Methods
    
    func handleLoginWithSignInProvider(_ signInProvider: AWSSignInProvider) {
        AWSIdentityManager.default().login(signInProvider: signInProvider, completionHandler: {(result: Any?, error: Error?) in
            // If no error reported by SignInProvider, discard the sign-in view controller.
            if error == nil {
                DispatchQueue.main.async(execute: {
                    _ = self.navigationController?.popToRootViewController(animated: true)
                })
            }
             print("result = \(result), error = \(error)")
        })
    }

    func showErrorDialog(_ loginProviderName: String, withError error: NSError) {
         print("\(loginProviderName) failed to sign in w/ error: \(error)")
        let alertController = UIAlertController(title: NSLocalizedString("Sign-in Provider Sign-In Error", comment: "Sign-in error for sign-in failure."), message: NSLocalizedString("\(loginProviderName) failed to sign in w/ error: \(error)", comment: "Sign-in message structure for sign-in failure."), preferredStyle: .alert)
        let doneAction = UIAlertAction(title: NSLocalizedString("Cancel", comment: "Label to cancel sign-in failure."), style: .cancel, handler: nil)
        alertController.addAction(doneAction)
        present(alertController, animated: true, completion: nil)
    }

    // MARK: - IBActions

    
}
